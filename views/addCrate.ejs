<!DOCTYPE html>
<html>
<head>
    <title>Add Crate</title>
    <script src="/script.js" defer></script>
    <script src="https://cdn.jsdelivr.net/npm/jsqr/dist/jsQR.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html5-qrcode/2.3.4/html5-qrcode.min.js" integrity="sha512-k/KAe4Yff9EUdYI5/IAHlwUswqeipP+Cp5qnrsUjTPCgl51La2/JhyyjNciztD7mWNKLSXci48m7cctATKfLlQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        h1 {
            color: #333;
        }
        #message {
            margin-top: 20px;
            font-weight: bold;
        }
        .success {
            color: green;
        }
        .error {
            color: red;
        }
        #camera {
            margin-top: 20px;
            border: 1px solid #ccc;
        }
        #camera canvas {
            width: 100%;
        }

        .pin-login {
        display: inline-block;
        border-radius: 10px;
        padding: 10px;
        font-size: 28px;
        background: #d9deff;
        border: 1px solid #363b5e;
        user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        -webkit-user-select: none;
        font-family: sans-serif;
        }

        .pin-login__text {
        margin: 10px auto 10px auto;
        padding: 10px;
        display: block;
        width: 50%;
        font-size: 0.5em;
        text-align: center;
        letter-spacing: 0.2em;
        background: rgba(0, 0, 0, 0.15);
        border: none;
        border-radius: 10px;
        outline: none;
        cursor: default;
        }

        .pin-login__text--error {
        color: #901818;
        background: #ffb3b3;
        animation-name: loginError;
        animation-duration: 0.1s;
        animation-iteration-count: 2;
        }

        @keyframes loginError {
        25% {
            transform: translateX(-3px);
        }
        75% {
            transform: translateX(3px);
        }
        }

        @-moz-keyframes loginError {
        25% {
            transform: translateX(-3px);
        }
        75% {
            transform: translateX(3px);
        }
        }

        .pin-login__key {
        width: 60px;
        height: 60px;
        margin: 10px;
        background: rgba(0, 0, 0, 0.15);
        color: #363b5e;
        border-radius: 50%;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        cursor: pointer;
        }

        .pin-login__key:active {
        background: rgba(0, 0, 0, 0.25);
        }

        .numeric-keypad,
.numeric-keypad__key,
.numeric-keypad__button {
	-webkit-box-sizing: border-box;
	box-sizing: border-box;
}

.numeric-keypad {
	background: #F4F4F4;
	border: 1px solid;
	float: left;
	list-style: none;
	margin: 0;
	padding: 0;
	position: absolute;
	width: 150px;
}
	.numeric-keypad--show {
		display: block;
	}
	
	.numeric-keypad__key {
		background: #CCC;
		border: 1px solid;
		display: block;
		float: left;
		text-align: center;
		width: 49.33px;
	}
		.numeric-keypad__key--double {
			width: 98.66px;
		}

	.numeric-keypad__button {
		border: none;
		color: #000;
		display: block;
		font-family: 'Helvetica Neue', Arial, sans-serif;
		height: 49.33px;
		line-height: 49.33px;
		padding: 0;
		text-decoration: none;
		width: 100%;
	}

    </style>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body>
    <h1>Scan to Add Crate</h1>
    <p>Scan a crate code, then scan items one by one. Scan "FINALIZE" (0) to complete crate creation.</p>
    <form>
        <input type="text" id="scanInput" autofocus>

    <div id="message"></div>

    <h2>Existing Crates</h2>
    <ul id="crateList">
        <% for (let crate in crates) { %>
            <li><strong><%= crate %></strong>: <%= crates[crate].items.join(', ') %></li>
        <% } %>
    </ul>


    <script>
        const enterevent = new KeyboardEvent('keydown', {
            key: 'Enter',
            code: 'Enter',
            which: 13,
            keyCode: 13,
        });
        var numPad = (function(){
	var self;

	var inputEl = document.getElementById("scanInput")
	var numPadEl;

	var keys = [7,8,9,4,5,6,1,2,3,0,'Del','Ok'];

	var initialValue;

	function init() {
		self = this;

		createKeyPad();

		bindEvents();
	}

	function createKeyPad() {
		numPadEl = document.createElement('ul');
		numPadEl.setAttribute('id', 'numeric-keypad');
		numPadEl.className = 'numeric-keypad';

		for (var i=0; i<keys.length;i++) {
			var numPadKeyEl = document.createElement('li');
			numPadKeyEl.className = 'numeric-keypad__key';

			if (keys[i] == 'Ok') {
				numPadKeyEl.classList.add('numeric-keypad__key--double');
			}

			var numPadButtonEl = document.createElement('button');
			numPadButtonEl.setAttribute('data-key', keys[i]);
			numPadButtonEl.className = 'numeric-keypad__button';

			numPadButtonEl.innerHTML = keys[i];

			numPadKeyEl.appendChild(numPadButtonEl);
			numPadEl.appendChild(numPadKeyEl);
		}

		console.log(numPadEl);

		document.body.appendChild(numPadEl);
	}

	function bindEvents() {
		var inputEls = document.querySelectorAll('[data-num-pad]');

		for (var i=0;i<inputEls.length;i++) {
			inputEls[i].addEventListener('focus', showNumPad, false);
		}

		var keys = numPadEl.querySelectorAll('[data-key]');

		for (var i=0; i<keys.length;i++) {
			keys[i].addEventListener('click', keyPress, false);
		}

		var confirm = numPadEl.querySelectorAll('[data-key="Ok"]');

		confirm[0].addEventListener('click', confirmValue, false);

	}

	function showNumPad() {
		inputEl = this;

		initialValue = inputEl.value;

		numPadEl.style.top = (this.offsetTop + this.offsetHeight) + 'px';

		numPadEl.classList.add('numeric-keypad--show');
	}

	function hideNumPad() {
		numPadEl.classList.remove('numeric-keypad--show');
	}

	function keyPress(e) {
    e.preventDefault();

    var key = this.getAttribute('data-key');

    var currentInput = inputEl.value;

    if (key == 'Del') {
        if (inputEl.value.length) {
            inputEl.value = inputEl.value.substr(0, inputEl.value.length - 1);
        }

        return;
    }

    if (key == 'Ok') {
        hideNumPad(); // Ensure the numeric keypad is hidden
        inputEl.dispatchEvent(enterevent); // Dispatch the "Enter" event for submission
        inputEl.focus(); // Refocus on the input field
        return;
    }

    var inputValue = currentInput + key;

    inputEl.value = inputValue;
}


	function confirmValue(e) {
		e.preventDefault();

		hideNumPad();

		confirmValueCallback(inputEl);
	}

	function confirmValueCallback(el) {
		console.log('default confirm value callback');
	}

	function cancelValue(e) {
		e.preventDefault();

		hideNumPad();

		inputEl.value = initialValue;

		cancelValueCallback(inputEl);
	}

	function cancelValueCallback(e) {
		console.log('default cancel value callback');
	}

	return {
		init: init
	}
}());
    </script>

    <script>
		numPad.init();
	</script>
</body>
</html>
